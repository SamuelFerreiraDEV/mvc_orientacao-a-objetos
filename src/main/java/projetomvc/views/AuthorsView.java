/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projetomvc.views;

import java.util.HashMap;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JTextField;

import projetomvc.controllers.Controller;
import projetomvc.models.entities.Author;
import projetomvc.models.entities.Book;
import projetomvc.views.interfaces.ViewNavigator;

/**
 *
 * @author samuel
 */
public class AuthorsView extends BaseView<Author> {
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(AuthorsView.class.getName());
    private Integer selectedAuthorId = null;

    /**
     * Creates new form AuthorsView
     */
    public AuthorsView(ViewNavigator navigator, Controller<Author> authorController, Controller<Book> bookController) {
        super(new JTextField[] {}, navigator, authorController, bookController);
        initComponents();
        super.textFields = new JTextField[] { this.fieldName, this.fieldBirthDate, this.fieldHometown };
        this.displayAuthors(true, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelHeader = new javax.swing.JLabel();
        panelButtons = new javax.swing.JPanel();
        buttonMainScreen = new javax.swing.JButton();
        buttonNew = new javax.swing.JButton();
        buttonSearch = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        panelInput = new javax.swing.JPanel();
        labelName = new javax.swing.JLabel();
        fieldName = new javax.swing.JTextField();
        labelAuthor = new javax.swing.JLabel();
        labelHometown = new javax.swing.JLabel();
        fieldHometown = new javax.swing.JTextField();
        fieldBirthDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        actionResultArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        entitiesList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelHeader.setFont(new java.awt.Font("Fira Code", 1, 24)); // NOI18N
        labelHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelHeader.setText("Gerenciador de Autores");

        buttonMainScreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        buttonMainScreen.setText("Voltar");
        buttonMainScreen.setMaximumSize(new java.awt.Dimension(103, 42));
        buttonMainScreen.setMinimumSize(new java.awt.Dimension(103, 42));
        buttonMainScreen.setPreferredSize(new java.awt.Dimension(103, 42));
        buttonMainScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMainScreenActionPerformed(evt);
            }
        });
        panelButtons.add(buttonMainScreen);

        buttonNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/novo_32x32.png"))); // NOI18N
        buttonNew.setText("Novo");
        buttonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewActionPerformed(evt);
            }
        });
        panelButtons.add(buttonNew);

        buttonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/search.png"))); // NOI18N
        buttonSearch.setText("Buscar");
        buttonSearch.setMaximumSize(new java.awt.Dimension(108, 42));
        buttonSearch.setMinimumSize(new java.awt.Dimension(108, 42));
        buttonSearch.setPreferredSize(new java.awt.Dimension(108, 42));
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {   
                buttonSearchActionPerformed(evt);
            }
        });
        panelButtons.add(buttonSearch);

        buttonEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edit3_32x32.png"))); // NOI18N
        buttonEdit.setText("Editar");
        buttonEdit.setEnabled(false);
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });
        panelButtons.add(buttonEdit);

        buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/del_32x32.png"))); // NOI18N
        buttonDelete.setText("Excluir");
        buttonDelete.setEnabled(false);
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });
        panelButtons.add(buttonDelete);

        buttonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save_32x32.png"))); // NOI18N
        buttonSave.setText("Salvar");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        panelButtons.add(buttonSave);

        panelInput.setBackground(new java.awt.Color(204, 204, 204));

        labelName.setBackground(new java.awt.Color(0, 0, 0));
        labelName.setForeground(new java.awt.Color(0, 0, 0));
        labelName.setText("Nome:");

        fieldName.setBackground(new java.awt.Color(255, 255, 255));
        fieldName.setForeground(new java.awt.Color(0, 0, 0));

        labelAuthor.setForeground(new java.awt.Color(0, 0, 0));
        labelAuthor.setText("Data de nascimento:");

        labelHometown.setForeground(new java.awt.Color(0, 0, 0));
        labelHometown.setText("Cidade natal:");

        fieldHometown.setBackground(new java.awt.Color(255, 255, 255));
        fieldHometown.setForeground(new java.awt.Color(0, 0, 0));

        fieldBirthDate.setBackground(new java.awt.Color(255, 255, 255));
        fieldBirthDate.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout panelInputLayout = new javax.swing.GroupLayout(panelInput);
        panelInput.setLayout(panelInputLayout);
        panelInputLayout.setHorizontalGroup(
            panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInputLayout.createSequentialGroup()
                        .addComponent(labelName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelInputLayout.createSequentialGroup()
                        .addComponent(labelAuthor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelHometown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldHometown)
                .addContainerGap())
        );
        panelInputLayout.setVerticalGroup(
            panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelHometown)
                        .addComponent(fieldHometown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelName)
                        .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAuthor)
                    .addComponent(fieldBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        actionResultArea.setBackground(new java.awt.Color(255, 255, 255));
        actionResultArea.setColumns(20);
        actionResultArea.setRows(5);
        jScrollPane1.setViewportView(actionResultArea);

        entitiesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                EntitiesListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(entitiesList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelHeader, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(panelInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonMainScreenActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        this.setVisible(false);
        this.navigator.showMainView();
    }

    private void buttonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewActionPerformed
        super.clearTextFields();
        this.entitiesList.clearSelection();
        this.selectedAuthorId = null;
    }//GEN-LAST:event_buttonNewActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        this.displayAuthors(true, true);
    }//GEN-LAST:event_buttonSearchActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        if (this.selectedAuthorId != null) {
            Author author = super.getController(Author.class).show(this.selectedAuthorId);

            this.fieldName.setText(author.getName());
            this.fieldHometown.setText(author.getHometown());
            this.fieldBirthDate.setText(author.getBirthDate().toString());
        }
        else {
            JOptionPane.showMessageDialog(this,
                "Selecione um autor da lista para editar.",
                "Edição",
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        if (this.selectedAuthorId != null) {
            Author author = super.getController(Author.class).show(this.selectedAuthorId);
            boolean deleted = super.getController(Author.class).delete(this.selectedAuthorId);
            this.displayActionResultText("delete", deleted, author);
            this.displayAuthors(false, true);
            this.selectedAuthorId = null;
            this.entitiesList.clearSelection();
        } else {
            JOptionPane.showMessageDialog(this,
                "Selecione um autor da lista para remover.",
                "Remoção",
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        if(super.fieldsValid()) {
            Author author = buildAuthorFromInputs();
            boolean persisted = false;
            String action = null;

            if (this.selectedAuthorId != null) {
                persisted = super.getController(Author.class).update(this.selectedAuthorId, author);
                action = "update";
                this.selectedAuthorId = null;
                this.entitiesList.clearSelection();
            } else {
                persisted = super.getController(Author.class).create(author);
                action = "save";
            }

            super.clearTextFields();
            this.displayActionResultText(action, persisted, author);
            this.displayAuthors(false, true);
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private Author buildAuthorFromInputs() {
        Author author = new Author();

        author.setName(this.fieldName.getText());
        author.setHometown(this.fieldHometown.getText());
        author.setBirthDate(Integer.parseInt(this.fieldBirthDate.getText()));

        return author;
    }

    private void displayActionResultText(String action, boolean success, Author author) {
        String result = "";
        switch (action) {
            case "save":
                result = success ? "Autor salvo: " + author.getName() : "Erro ao salvar autor.";
                break;
            case "update":
                result = success ? "Autor editado: " + author.getName() : "Erro ao editar autor.";
                break;
            case "delete":
                result = success ? "Autor removido: " + author.getName() : "Erro ao remover autor.";
                break;
        }
        this.actionResultArea.setText(result);
    }

    private void displayAuthors(boolean updateActionResultArea, boolean updateBooksList) {
        List<Author> authors = this.searchAuthors();
        if (updateActionResultArea) {
            setEntitiesResult(authors);
        }
        if (updateBooksList) {
            this.updateEntitiesList(authors);
        }
    }

    private List<Author> searchAuthors() {
        HashMap<String, String> params = this.buildParams();
        List<Author> authors = super.getController(Author.class).index(params);

        if (authors != null && !authors.isEmpty()) {
            return authors;
        } else {
            JOptionPane.showMessageDialog(this, "Autor não encontrado.", "Busca", JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }

    @Override
    protected HashMap<String, String> buildParams() {
        HashMap<String, String> params = new HashMap<>();
        
        params.put("name", this.fieldName.getText());
        params.put("hometown", this.fieldHometown.getText());
        params.put("birthDate", this.fieldBirthDate.getText());

        return params;
    }

    @Override
    protected void setEntitiesResult(List<Author> entities) {
        if (entities != null && !entities.isEmpty()) {
            super.clearTextFields();
            this.actionResultArea.setText("Autores encontrados:\n");
            for (Author entity : entities) {
                this.actionResultArea.append("Nome: " + entity.getName() + ", Cidade Natal: " + entity.getHometown() + ", Data de nascimento: " + entity.getBirthDate() + "\n");
            }
        }
    }

    protected void updateEntitiesList(List<Author> entities) {
        if (entities != null && !entities.isEmpty()) {
            this.entitiesList.setListData(entities.stream().map(entity -> entity.getId() + ": " + entity.getName()).toArray(String[]::new));
        }
    }

    private void EntitiesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_EntitiesListValueChanged
        String value = this.entitiesList.getSelectedValue();
        if (value != null && !value.trim().isEmpty()) {
            this.selectedAuthorId = Integer.parseInt(value.split(":")[0]);
            this.buttonEdit.setEnabled(true);
            this.buttonDelete.setEnabled(true);
        } else {
            this.buttonEdit.setEnabled(false);
            this.buttonDelete.setEnabled(false);
            this.selectedAuthorId = null;
        }
    }//GEN-LAST:event_EntitiesListValueChanged

    @Override
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        if(visible) {
            super.clearTextFields();
            this.displayAuthors(true, true);
        }
    }

    @Override
    protected Class<Author> getEntityClass() {
        return Author.class;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea actionResultArea;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonMainScreen;
    private javax.swing.JButton buttonNew;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JTextField fieldBirthDate;
    private javax.swing.JTextField fieldHometown;
    private javax.swing.JTextField fieldName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelAuthor;
    private javax.swing.JLabel labelHeader;
    private javax.swing.JLabel labelHometown;
    private javax.swing.JLabel labelName;
    private javax.swing.JList<String> entitiesList;
    private javax.swing.JPanel panelButtons;
    private javax.swing.JPanel panelInput;
    // End of variables declaration//GEN-END:variables
}
